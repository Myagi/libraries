{"version":3,"file":"fraql.mock.cjs.js","sources":["../node_modules/xtend/immutable.js","../src/mock.js"],"sourcesContent":["module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","import gql from 'graphql-tag'\nimport {\n  buildClientSchema,\n  execute,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLSchema,\n} from 'graphql'\nimport {\n  addMockFunctionsToSchema,\n  mergeSchemas,\n  transformSchema,\n} from 'graphql-tools'\nimport extend from 'xtend'\n\nexport function generateSchemaFromIntrospectionResult(introspectionResult) {\n  const introspectionData = introspectionResult.data || introspectionResult\n  const originalSchema = buildClientSchema(introspectionData)\n\n  const typeMap = originalSchema.getTypeMap()\n  const fields = Object.keys(typeMap).reduce((fields, typeName) => {\n    const type = typeMap[typeName]\n    if (\n      typeName.startsWith('__') ||\n      typeName === 'Query' ||\n      (!(type instanceof GraphQLObjectType) &&\n        !(type instanceof GraphQLInterfaceType))\n    ) {\n      return fields\n    }\n    return extend(fields, {\n      [`fraql__${typeName}`]: {\n        type: typeMap[typeName],\n      },\n    })\n  }, {})\n\n  const fraqlSchema = new GraphQLSchema({\n    query: new GraphQLObjectType({ name: 'Query', fields }),\n  })\n\n  return mergeSchemas({ schemas: [originalSchema, fraqlSchema] })\n}\n\nfunction mockSchema(schema, { mocks } = {}) {\n  // Clone schema\n  const clonedSchema = transformSchema(schema, [])\n  addMockFunctionsToSchema({ schema: clonedSchema, mocks })\n  return clonedSchema\n}\n\nfunction executeFragment(schema, fragmentDocument) {\n  if (!fragmentDocument.originalDocument) {\n    throw new Error(\n      'fraql: generateDataFromFragment supports only fraql fragments',\n    )\n  }\n  const typeName = fragmentDocument.definitions[0].typeCondition.name.value\n  const fieldName = `fraql__${typeName}`\n  const query = gql`\n    query {\n      ${fieldName} {\n        ${fragmentDocument}\n      }\n    }\n  `\n\n  const res = execute(schema, query)\n\n  if (res.errors && res.errors.length) {\n    throw res.errors[0]\n  }\n\n  if (res.data[fieldName] === undefined) {\n    throw new Error(`fraql: type \"${typeName}\" not found`)\n  }\n  return res.data[fieldName]\n}\n\nexport class Mocker {\n  constructor(schema, { mocks } = {}) {\n    this.schema = schema\n    this.mocks = mocks\n  }\n\n  mockSchema({ mocks } = {}) {\n    const mergedMocks = extend(this.mocks, mocks)\n    return mockSchema(this.schema, { mocks: mergedMocks })\n  }\n\n  mockFragment(fragmentDocument, options) {\n    const schema = this.mockSchema(options)\n    return executeFragment(schema, fragmentDocument)\n  }\n\n  mockFragments(fragmentDocuments, options) {\n    const schema = this.mockSchema(options)\n    return Object.keys(fragmentDocuments).reduce((data, key) => {\n      const fragmentDocument = fragmentDocuments[key]\n      return extend(data, {\n        [key]: executeFragment(schema, fragmentDocument),\n      })\n    }, {})\n  }\n}\n\nexport function createMockerFromSchema(schema, options) {\n  return new Mocker(schema, options)\n}\n\nexport function createMockerFromIntrospection(introspectionResult, options) {\n  const schema = generateSchemaFromIntrospectionResult(introspectionResult)\n  return createMockerFromSchema(schema, options)\n}\n"],"names":["module","extend","hasOwnProperty","Object","prototype","target","i","arguments","length","source","key","call","generateSchemaFromIntrospectionResult","introspectionResult","introspectionData","data","originalSchema","buildClientSchema","typeMap","getTypeMap","fields","keys","reduce","typeName","type","startsWith","GraphQLObjectType","GraphQLInterfaceType","fraqlSchema","GraphQLSchema","name","mergeSchemas","schemas","mockSchema","schema","mocks","clonedSchema","transformSchema","executeFragment","fragmentDocument","originalDocument","Error","definitions","typeCondition","value","fieldName","query","gql","res","execute","errors","undefined","Mocker","mergedMocks","mockFragment","options","mockFragments","fragmentDocuments","createMockerFromSchema","createMockerFromIntrospection"],"mappings":";;;;;;;;;;AAAAA,aAAA,GAAiBC,MAAjB;;AAEA,IAAIC,iBAAiBC,OAAOC,SAAP,CAAiBF,cAAtC;;AAEA,SAASD,MAAT,GAAkB;QACVI,SAAS,EAAb;;SAEK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,GAAtC,EAA2C;YACnCG,SAASF,UAAUD,CAAV,CAAb;;aAEK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;gBAChBP,eAAeS,IAAf,CAAoBF,MAApB,EAA4BC,GAA5B,CAAJ,EAAsC;uBAC3BA,GAAP,IAAcD,OAAOC,GAAP,CAAd;;;;;WAKLL,MAAP;;;;;;;;;;;;;;;;ACFJ,AAAO,SAASO,qCAAT,CAA+CC,mBAA/C,EAAoE;MACnEC,oBAAoBD,oBAAoBE,IAApB,IAA4BF,mBAAtD;MACMG,iBAAiBC,0BAAkBH,iBAAlB,CAAvB;;MAEMI,UAAUF,eAAeG,UAAf,EAAhB;MACMC,SAASjB,OAAOkB,IAAP,CAAYH,OAAZ,EAAqBI,MAArB,CAA4B,UAACF,MAAD,EAASG,QAAT,EAAsB;;;QACzDC,OAAON,QAAQK,QAAR,CAAb;QAEEA,SAASE,UAAT,CAAoB,IAApB,KACAF,aAAa,OADb,IAEC,EAAEC,gBAAgBE,yBAAlB,KACC,EAAEF,gBAAgBG,4BAAlB,CAJJ,EAKE;aACOP,MAAP;;WAEKnB,UAAOmB,MAAP,qCACMG,QADN,IACmB;YAChBL,QAAQK,QAAR;KAFH,WAAP;GAVa,EAeZ,EAfY,CAAf;;MAiBMK,cAAc,IAAIC,qBAAJ,CAAkB;WAC7B,IAAIH,yBAAJ,CAAsB,EAAEI,MAAM,OAAR,EAAiBV,cAAjB,EAAtB;GADW,CAApB;;SAIOW,0BAAa,EAAEC,SAAS,CAAChB,cAAD,EAAiBY,WAAjB,CAAX,EAAb,CAAP;;;AAGF,SAASK,WAAT,CAAoBC,MAApB,EAA4C;iFAAJ,EAAI;MAAdC,KAAc,QAAdA,KAAc;;;MAEpCC,eAAeC,6BAAgBH,MAAhB,EAAwB,EAAxB,CAArB;wCACyB,EAAEA,QAAQE,YAAV,EAAwBD,YAAxB,EAAzB;SACOC,YAAP;;;AAGF,SAASE,eAAT,CAAyBJ,MAAzB,EAAiCK,gBAAjC,EAAmD;MAC7C,CAACA,iBAAiBC,gBAAtB,EAAwC;UAChC,IAAIC,KAAJ,CACJ,+DADI,CAAN;;MAIIlB,WAAWgB,iBAAiBG,WAAjB,CAA6B,CAA7B,EAAgCC,aAAhC,CAA8Cb,IAA9C,CAAmDc,KAApE;MACMC,wBAAsBtB,QAA5B;MACMuB,QAAQC,GAAR,kBAEAF,SAFA,EAGEN,gBAHF,CAAN;;MAQMS,MAAMC,gBAAQf,MAAR,EAAgBY,KAAhB,CAAZ;;MAEIE,IAAIE,MAAJ,IAAcF,IAAIE,MAAJ,CAAW1C,MAA7B,EAAqC;UAC7BwC,IAAIE,MAAJ,CAAW,CAAX,CAAN;;;MAGEF,IAAIjC,IAAJ,CAAS8B,SAAT,MAAwBM,SAA5B,EAAuC;UAC/B,IAAIV,KAAJ,mBAA0BlB,QAA1B,iBAAN;;SAEKyB,IAAIjC,IAAJ,CAAS8B,SAAT,CAAP;;;AAGF,IAAaO,MAAb;kBACclB,MAAZ,EAAoC;oFAAJ,EAAI;QAAdC,KAAc,SAAdA,KAAc;;;;SAC7BD,MAAL,GAAcA,MAAd;SACKC,KAAL,GAAaA,KAAb;;;mBAGFF,UANF,yBAM6B;oFAAJ,EAAI;QAAdE,KAAc,SAAdA,KAAc;;QACnBkB,cAAcpD,UAAO,KAAKkC,KAAZ,EAAmBA,KAAnB,CAApB;WACOF,YAAW,KAAKC,MAAhB,EAAwB,EAAEC,OAAOkB,WAAT,EAAxB,CAAP;GARJ;;mBAWEC,YAXF,yBAWef,gBAXf,EAWiCgB,OAXjC,EAW0C;QAChCrB,SAAS,KAAKD,UAAL,CAAgBsB,OAAhB,CAAf;WACOjB,gBAAgBJ,MAAhB,EAAwBK,gBAAxB,CAAP;GAbJ;;mBAgBEiB,aAhBF,0BAgBgBC,iBAhBhB,EAgBmCF,OAhBnC,EAgB4C;QAClCrB,SAAS,KAAKD,UAAL,CAAgBsB,OAAhB,CAAf;WACOpD,OAAOkB,IAAP,CAAYoC,iBAAZ,EAA+BnC,MAA/B,CAAsC,UAACP,IAAD,EAAOL,GAAP,EAAe;;;UACpD6B,mBAAmBkB,kBAAkB/C,GAAlB,CAAzB;aACOT,UAAOc,IAAP,2BACJL,GADI,IACE4B,gBAAgBJ,MAAhB,EAAwBK,gBAAxB,CADF,YAAP;KAFK,EAKJ,EALI,CAAP;GAlBJ;;;;;AA2BA,AAAO,SAASmB,sBAAT,CAAgCxB,MAAhC,EAAwCqB,OAAxC,EAAiD;SAC/C,IAAIH,MAAJ,CAAWlB,MAAX,EAAmBqB,OAAnB,CAAP;;;AAGF,AAAO,SAASI,6BAAT,CAAuC9C,mBAAvC,EAA4D0C,OAA5D,EAAqE;MACpErB,SAAStB,sCAAsCC,mBAAtC,CAAf;SACO6C,uBAAuBxB,MAAvB,EAA+BqB,OAA/B,CAAP;;;;;;;;"}